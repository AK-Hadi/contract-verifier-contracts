;; Simplified verifier registry 
;; passes on messages signed by a public key to sources registry
#pragma version >=0.2.0;
#include "imports/stdlib.fc";

const int time::ten_min = 600;
const int error::expired_msg = 997;
const int error::empty_msg = 998;
const int error::invalid_signature = 999;

(int) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_uint(256) ;; pub_key
  );
}

;; TODO describe payload
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
    
  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  (int public_key) = load_data();

  slice signature = in_msg_body~load_bits(512);
  slice signed_msg = in_msg_body~load_ref().begin_parse();

  throw_unless(error::invalid_signature, check_signature(slice_hash(signed_msg), signature, public_key));

  int valid_from = signed_msg~load_uint(32);
  throw_if(error::expired_msg, now() > valid_from + time::ten_min);
  
  slice to = signed_msg~load_msg_addr();
  
  cell message = signed_msg~load_ref();
  throw_if(error::empty_msg, slice_empty?(message.begin_parse()));

  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32)
            .store_uint(0, 1) ;; no stateinit
            .store_uint(1, 1) ;; msg in ref
            .store_ref(message);
  send_raw_message(msg.end_cell(), 64);
  return();
}